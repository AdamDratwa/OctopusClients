<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Octopus.Client</name>
    </assembly>
    <members>
        <member name="T:Octopus.Client.DefaultLinkResolver">
            <summary>
            In the same way web browsers can follow links like "/api/foo" by knowing the URI of the current page, this class allows application 
            links to be resolved into fully-qualified URI's. This implementation also supports virtual directories. It assumes that the 
            API endpoint starts with <c>/api</c>.
            </summary>
        </member>
        <member name="T:Octopus.Client.ILinkResolver">
            <summary>
            In the same way web browsers can follow links like "/foo" by knowing the URI of the current page, this class allows application 
            links to be resolved into fully-qualified URI's.
            </summary>
        </member>
        <member name="M:Octopus.Client.ILinkResolver.Resolve(System.String)">
            <summary>
            Resolves the specified link into a fully qualified URI.
            </summary>
            <param name="link">The application relative link (should begin with a <c>/</c>).</param>
            <returns>
            The fully resolved URI.
            </returns>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.DefaultLinkResolver"/> class.
            </summary>
            <param name="root">The root URI of the server.</param>
            <param name="allUrisStartWith">A segment that users might or might not include when entering the root URI. If the segment exists, it will be ignored.</param>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.Resolve(System.String)">
            <summary>
            Resolves the specified link into a fully qualified URI.
            </summary>
            <param name="link">The application relative link (should begin with a <c>/</c>).</param>
            <returns>
            The fully resolved URI.
            </returns>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the root URI that URI's are resolved from.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusException">
            <summary>
            Base class for all exceptions thrown by the Octopus client.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusException.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusExceptionFactory">
            <summary>
            Factory for mapping HTTP errors into Octopus exceptions.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusExceptionFactory.CreateException(System.Net.WebException,System.Net.HttpWebResponse)">
            <summary>
            Creates the appropriate <see cref="T:Octopus.Client.Exceptions.OctopusException"/> from a HTTP response.
            </summary>
            <param name="webException">The web exception.</param>
            <param name="response">The response.</param>
            <returns>A rich exception describing the problem.</returns>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract">
            <summary>
            Error contract for error responses.
            </summary>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.FullException">
            <summary>
            Gets or sets the full exception.
            </summary>
            <value>
            The full exception.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 404, such as when the specified 
            resource does not exist on the server.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusResourceNotFoundException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusSecurityException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 401 or 403, indicating that the current 
            user's API key was not valid, their account is disabled, or they don't have permission to perform the 
            specified action.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusSecurityException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusSecurityException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusServerException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 500 or any other error, indicating that there was a problem processing
            the request.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusServerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusServerException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusValidationException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 400, indicating a problem with the request.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusValidationException.#ctor(System.Int32,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusValidationException"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusValidationException.ErrorMessage">
            <summary>
            Gets the error message that was returned by the Octopus Server.
            </summary>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusValidationException.Errors">
            <summary>
            Gets a list of problems with the request that was returned by the Octopus Server.
            </summary>
        </member>
        <member name="T:Octopus.Client.IHttpOctopusClient">
            <summary>
            Implemented by an <see cref="T:Octopus.Client.IOctopusClient"/> that uses HTTP to communicate.
            </summary>
        </member>
        <member name="T:Octopus.Client.IOctopusClient">
            <summary>
            Contract for a client to the Octopus Deploy HTTP API.
            </summary>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links"/> property.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.  
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">A callback invoked for each page of data found. If the callback returns <c>true</c>, the next page will also be requested.</param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.  
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">A callback invoked for each page of data found. If the callback returns <c>true</c>, the next page will also be requested.</param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Create``1(System.String,``0)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch the created item.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Post``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Update``1(System.String,``0)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload the data.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Delete(System.String)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb. Deletes in Octopus happen asynchronously via a background task
            that is executed by the Octopus server. The payload returned by delete will be the task that was created on the server. 
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to delete.</param>
            <returns>A task resource that provides details about the background task that deletes the specified resource.</returns>
        </member>
        <member name="E:Octopus.Client.IOctopusClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.IOctopusClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the server. Instead of hardcoding paths, 
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so that it is only requested once for 
            the current <see cref="T:Octopus.Client.IOctopusClient"/>.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">HTTP 401 or 403: Thrown when the current user's API key was not valid, their account is disabled, or they don't have permission to perform the specified action.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">If any other error is successfully returned from the server (e.g., a 500 server error).</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
        </member>
        <member name="E:Octopus.Client.IHttpOctopusClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Resource">
            <summary>
            Base class for all resources.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.IResource">
            <summary>
            Implemented by all resources.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IResource.Links">
            <summary>
            Gets or sets a dictionary of links to other related resources. These links can be used to navigate the resources on the server.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.IAuditedResource">
            <summary>
            Implemented by resources that are audited.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IAuditedResource.LastModifiedOn">
            <summary>
            Gets or sets the date/time that this resource was last modified.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IAuditedResource.LastModifiedBy">
            <summary>
            Gets or sets the username of the user who last modified this resource.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.Resource"/> class.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Resource.HasLink(System.String)">
            <summary>
            Determines whether the specified link exists.
            </summary>
            <param name="name">The name/key of the link.</param>
            <returns>
              <c>true</c> if the specified link is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Octopus.Client.Model.Resource.Link(System.String)">
            <summary>
            Gets the link with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.Exception">If the link is not defined.</exception>
        </member>
        <member name="P:Octopus.Client.Model.Resource.Id">
            <summary>
            Gets or sets a unique ID for this resource.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.LastModifiedOn">
            <summary>
            Gets or sets the date/time that this resource was last modified.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.LastModifiedBy">
            <summary>
            Gets or sets the username of the user who last modified this resource.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.Links">
            <summary>
            Gets or sets a dictionary of links to other related resources. These links can be used to navigate the resources on the server.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.DetailAttribute">
            <summary>
            Properties with this attribute will only be available if the resource is requested directly (i.e., by perfoming a GET to the 'self' link). The properties 
            won't be set on resources returned as part of a collection.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.EnvironmentResource">
            <summary>
            Represents an environment. Environments are user-defined and map to real world deployment environments such as development, staging, test and production. 
            Projects are deployed to environments.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.Name">
            <summary>
            Gets or sets the name of this environment. This should be short, preferably 5-20 characters. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.Description">
            <summary>
            Gets or sets a short description of this environment that can be used to explain the purpose of the environment to other users. This field may contain markdown. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.SortOrder">
            <summary>
            Gets or sets a number indicating the priority of this environment in sort order. Environments with a lower sort order will appear in the UI before items with a higher sort order.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.EventResource">
            <summary>
            Events are automatically created when significant actions take place within Octopus by users. Examples are adding environments, modifying projects, 
            deploying releases, cancelling tasks, and so on. Events can be used to provide an audit trail of what has happened in the system. The HTTP API *cannot*
            be used to add, modify or delete events. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.RelatedDocumentIds">
            <summary>
            Gets or sets a collection of document ID's that this event relates to. Note that the document ID's may no longer exist.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Category">
            <summary>
            Gets or sets the event category.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.UserId">
            <summary>
            Gets or sets the ID of the user who created the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Username">
            <summary>
            Gets or sets the name of the user who created the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Occurred">
            <summary>
            Gets or sets the date/time that the event took place.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Message">
            <summary>
            Gets or sets the message text that summarizes the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.MessageHtml">
            <summary>
            Gets or sets the message text that summarizes the event, HTML formatted with links to the related documents.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.MessageReferences">
            <summary>
            Gets or sets an array of document ID's and indexes where they are mentioned in the message text.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Comments">
            <summary>
            Gets or sets any user-provided comments that were recorded with the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Details">
            <summary>
            Gets or sets the details of the event. For events representing a modification to a document this will provide a HTML-formatted diff of the original and new document.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.LoginCommand">
            <summary>
            A command resource used for logging in.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.Username">
            <summary>
            The username to log in with.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.Password">
            <summary>
            The password to log in with.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.RememberMe">
            <summary>
            Whether the cookie should be persistent.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.NotReadableAttribute">
            <summary>
            Properties with this attribute can be set from API clients, but the value won't exist for resources returned from the server. Commonly used for fields like passwords or API 
            keys that allow a value to be written, but not read.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.PasswordComplexityAttribute">
            <summary>
              A custom validation rule that ensures passwords meet complexity requirements.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.PasswordComplexityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.PasswordComplexityAttribute"/> class.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ProjectGroupResource">
            <summary>
            Project groups are used to organize collections of related projects. For example, a customer may have a project group named 
            "Corporate Website" containing three seperate projects. Project groups affect retention policies and permissions.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.Name">
            <summary>
            Gets or sets the name of this project group.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.Environments">
            <summary>
            Gets or sets a collection of environment ID's. If this collection is empty, projects in this group can be deployed
            to any environment. If the collection is non-empty, then projects in the group are limited to only deploying to the 
            environments listed in this collection.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.RetentionPolicyId">
            <summary>
            Gets or sets the ID of the retention policy that will apply to projects in this group.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ProjectResource">
            <summary>
            Represents a project.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ReferenceCollection">
            <summary>
            A case-insensitive collection of unique strings used for holding document ID's. 
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.SemanticVersion">
            <summary>
            A hybrid implementation of SemVer that supports semantic versioning as described at http://semver.org while not strictly enforcing it to 
            allow older 4-digit versioning schemes to continue working.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.TryParse(System.String,Octopus.Client.Model.SemanticVersion@)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.TryParseStrict(System.String,Octopus.Client.Model.SemanticVersion@)">
            <summary>
            Parses a version string using strict semantic versioning rules that allows exactly 3 components and an optional special version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.ParseOptionalVersion(System.String)">
            <summary>
            Attempts to parse the version token as a SemanticVersion.
            </summary>
            <returns>An instance of SemanticVersion if it parses correctly, null otherwise.</returns>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.Version">
            <summary>
            Gets the normalized version portion.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.SpecialVersion">
            <summary>
            Gets the optional special version.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TaskResource">
            <summary>
            Octopus doesn't just store information; it actively *does* things. Examples include deployments, checking that machines are 
            online, automated database backups, and more. These "tasks" are queued and executed asynchronously, and their progress and logs 
            can be monitored using the HTTP API. Some tasks are created automatically; for example, Octopus will automatically create a task 
            to check the status of all machines every 5 minutes. Some tasks are created implicitly, such as when a deployment is created to execute 
            the actual deployment. And some tasks can be created manually, such as backup tasks and sending test emails. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Name">
            <summary>
            Gets or sets the name of the task to create. This name must be one of the list of possible names documented in the 
            create API operation documentation.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Description">
            <summary>
            Gets or sets a short, human-understandable description of this task. An example might be "Manual database backup". This is the 
            name that will be shown in the task list.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Arguments">
            <summary>
            Gets or sets any arguments to the task. For a `Deploy` task, this will be the ID of the corresponding deployment resource. Most other 
            tasks do not use arguments. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.State">
            <summary>
            Gets or sets the current state of the task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Completed">
            <summary>
            Gets or sets a value indicating the completion status of the task. May be "Timed out", "Queued...", "Executing...", or the time at 
            which the task completed for completed tasks.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.QueueTime">
            <summary>
            Gets or sets the time at which the task was queued.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.LastUpdatedTime">
            <summary>
            Gets or sets the time that the Octopus server last updated the status of this task. For a running task this should happen 
            at least every couple of minutes.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.CompletedTime">
            <summary>
            Gets or sets the date/time that the task completed. Will be null if the task has not yet completed.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.LogFileAttachmentSize">
            <summary>
            Gets or sets the size of the task log file.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Duration">
            <summary>
            Gets or sets a string indicating how long the task took to run.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.ErrorMessage">
            <summary>
            Gets or sets a short summary of the errors encountered when the task ran (if any).
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.HasBeenPickedUpByProcessor">
            <summary>
            Gets or sets a boolean value indicating whether the Octopus Server is processing this task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.IsCompleted">
            <summary>
            Gets or sets a value indicating whether the task has completed (that is, not queued, not running, and not paused; may have finished successfully or failed).
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.FinishedSuccessfully">
            <summary>
            Gets or sets a value indicating whether the task ran to completion successfully.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TaskState">
            <summary>
            Represents the different states a task goes through.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TenantPoolResource">
            <summary>
            A tenant pool is used to organize collections of tenants. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantPoolResource.Name">
            <summary>
            Gets or sets the name of the tenant pool.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantPoolResource.Description">
            <summary>
            Gets or sets a description of this tenant pool.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantPoolResource.VariableSetId">
            <summary>
            Gets or sets the ID of the collection of variables for this tenant pool.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TenantResource">
            <summary>
            Octopus 2.0 onwards supports multi-tenant deployments, a useful feature for deployment of SaaS applications. 
            A tenant typically represents a customer of the service. Tenants can have variables, and belong to one or more
            "tenant pools". During deployment of a multi-tenant project, users will select a tenant. 
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.TenantResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.TenantResource"/> class.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantResource.Name">
            <summary>
            Gets or sets a unique name for this tenant.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantResource.Description">
            <summary>
            Gets or sets a description for this tenant.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantResource.VariableSetId">
            <summary>
            Gets or sets the ID of the collection of variables for this tenant.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantResource.TenantPools">
            <summary>
            Gets or sets a collection of tenant pools that this tenant belongs to. A tenant can belong to multiple tenant pools.
            </summary>
        </member>
        <member name="T:Octopus.Client.Exceptions.UnsupportedApiVersionException">
            <summary>
            An exception thrown when the Octopus Server supports a version of the API that is incompatible with this class library.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.UnsupportedApiVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.UnsupportedApiVersionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Octopus.Client.Model.VariableSetResource">
            <summary>
            Represents a collection of variables that is attached to a document. Variables can be attached 
            to projects, environments, and globally.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.VariableSetResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.VariableSetResource"/> class.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.OwnerId">
            <summary>
            Gets or sets the ID of the document that owns these variables.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.Variables">
            <summary>
            Gets the collection of variables.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.WriteableAttribute">
            <summary>
            Properties with this attribute will be persisted to the server when sent using a POST or PUT request.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.WriteableOnCreateAttribute">
            <summary>
            Properties with this attribute will be persisted to the server when sent using a POST request.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusClientFactory">
            <summary>
            Creates instances of the <see cref="T:Octopus.Client.IOctopusClient"/>.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClientFactory.CreateClient(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Creates an instance of the client.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
            <returns>The <see cref="T:Octopus.Client.IOctopusClient"/> instance.</returns>
        </member>
        <member name="T:Octopus.Client.OctopusServerEndpoint">
            <summary>
            Specifies the location and credentials to use when communicating with an Octopus Deploy server.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint"/> class. Since no API key is provided, only very limited functionality will be available.
            </summary>
            <param name="octopusServerAddress">The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the client
            will assume Octopus runs under a virtual directory.</param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint"/> class.
            </summary>
            <param name="octopusServerAddress">The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the client
            will assume Octopus runs under a virtual directory.</param>
            <param name="apiKey">The API key to use when connecting to the Octopus server. For more information on API keys, please see the API documentation on authentication (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).</param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String,System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint"/> class.
            </summary>
            <param name="octopusServerAddress">The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the client
            will assume Octopus runs under a virtual directory.</param>
            <param name="apiKey">The API key to use when connecting to the Octopus server. For more information on API keys, please see the API documentation on authentication (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).</param>
            <param name="credentials">Additional credentials to use when communicating to servers that require integrated/basic authentication.</param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(Octopus.Client.ILinkResolver,System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint"/> class.
            </summary>
            <param name="octopusServer">The resolver that should be used to turn relative links into full URIs.</param>
            <param name="apiKey">The API key to use when connecting to the Octopus server. For more information on API keys, please see the API documentation on authentication (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).</param>
            <param name="credentials">Additional credentials to use when communicating to servers that require integrated/basic authentication.</param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.AsUser(System.String)">
            <summary>
            Recreates the endpoint using the API key of a new user.
            </summary>
            <param name="newUserApiKey">The new user API key.</param>
            <returns>An endpoint with a new user.</returns>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.OctopusServer">
            <summary>
            The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the client  will assume Octopus runs under a virtual directory.
            </summary>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.ApiKey">
            <summary>
            Gets the API key to use when connecting to the Octopus server. For more information on API keys, please see the API documentation on authentication (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).
            </summary>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.Credentials">
            <summary>
            Gets the additional credentials to use when communicating to servers that require integrated/basic authentication.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusClient">
            <summary>
            The Octopus Deploy RESTful HTTP API client. 
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.#ctor(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusClient"/> class.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links"/> property.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The collection of resources from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">A callback invoked for each page of data found. If the callback returns <c>true</c>, the next page will also be requested.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">A callback invoked for each page of data found. If the callback returns <c>true</c>, the next page will also be requested.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Create``1(System.String,``0)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch the created item.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Post``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Delete(System.String)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb. Deletes in Octopus happen asynchronously via a background task
            that is executed by the Octopus server. The payload returned by delete will be the task that was created on the server.
            </summary>
            <param name="path">The path to the resource to delete.</param>
            <returns>
            A task resource that provides details about the background task that deletes the specified resource.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Update``1(System.String,``0)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload the data.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="P:Octopus.Client.OctopusClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the server. Instead of hardcoding paths,
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so that it is only requested once for
            the current <see cref="T:Octopus.Client.IOctopusClient"/>.
            </summary>
        </member>
        <member name="T:Octopus.Client.Operations.IOperation">
            <summary>
            More complex higher-level tasks that need to be performed against the Octopus Deploy RESTful API are grouped into 
            operations, which allow them to be run in a standard way. 
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.IOperation.Execute(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
        </member>
        <member name="T:Octopus.Client.Operations.IRegisterMachineOperation">
            <summary>
            An <see cref="T:Octopus.Client.Operations.IOperation"/> for registering machines.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.EnvironmentNames">
            <summary>
            Gets or sets the environments that this machine should be added to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.Roles">
            <summary>
            Gets or sets the roles that this machine belongs to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.MachineName">
            <summary>
            Gets or sets the name of the machine that will be used within Octopus to identify this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentacleHostname">
            <summary>
            Gets or sets the hostname that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentaclePort">
            <summary>
            Gets or sets the TCP port that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentacleThumbprint">
            <summary>
            Gets or sets the certificate thumbprint that Octopus should expect when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.AllowOverwrite">
            <summary>
            If a machine with the same name already exists, it won't be overwritten by default (instead, an <see cref="T:System.ArgumentException"/> will be thrown). 
            Set this property to <c>true</c> if you do want the existing machine to be overwritten.
            </summary>
        </member>
        <member name="T:Octopus.Client.Operations.RegisterMachineOperation">
            <summary>
            An <see cref="T:Octopus.Client.Operations.IOperation"/> for registering machines.
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Operations.RegisterMachineOperation"/> class.
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.#ctor(Octopus.Client.IOctopusClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Operations.RegisterMachineOperation"/> class.
            </summary>
            <param name="clientFactory">The client factory.</param>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.Execute(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.EnvironmentNames">
            <summary>
            Gets or sets the environments that this machine should be added to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.Roles">
            <summary>
            Gets or sets the roles that this machine belongs to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.MachineName">
            <summary>
            Gets or sets the name of the machine that will be used within Octopus to identify this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentacleHostname">
            <summary>
            Gets or sets the hostname that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentaclePort">
            <summary>
            Gets or sets the TCP port that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentacleThumbprint">
            <summary>
            Gets or sets the certificate thumbprint that Octopus should expect when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.AllowOverwrite">
            <summary>
            If a machine with the same name already exists, it won't be overwritten by default (instead, an <see cref="T:System.ArgumentException"/> will be thrown). 
            Set this property to <c>true</c> if you do want the existing machine to be overwritten.
            </summary>
        </member>
        <member name="T:Octopus.Client.Extensions.LazyExtensions">
            <summary>
            Extension methods for <see cref="T:System.Lazy`1"/> instances.
            </summary>
        </member>
        <member name="M:Octopus.Client.Extensions.LazyExtensions.LoadValue``1(System.Lazy{``0})">
            <summary>
            Forces the Lazy value to be loaded.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="lazy">The lazy instance.</param>
            <returns>The value of the lazy instance.</returns>
        </member>
        <member name="T:Octopus.Client.Util.UrlTemplate">
            <summary>
              Modified implementation of the URI Template Spec RFC6570 for use in the Octopus Deploy RESTful API client.
            </summary>
            <remarks>
              This implementation is from: https://github.com/darrelmiller/UriTemplates. The class was renamed so as not to conflict with 
              the UriTemplate class built into .NET, and the static <see cref="M:Octopus.Client.Util.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"/> methods 
              were added.
            </remarks>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Octopus.Client.Util.UrlTemplate"/> class.
            </summary>
            <param name="template"> The template. </param>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.SetParameter(System.String,System.Object)">
            <summary>
              Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.SetParameter(System.String,System.String)">
            <summary>
              Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
              Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.GetParameterNames">
            <summary>
              Gets the parameter names.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.Resolve">
            <summary>
              Resolves this instance.
            </summary>
            <returns> </returns>
            <exception cref="T:System.ArgumentException">Malformed template :  + result
              or
              Malformed template :  + result</exception>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.Resolve(System.String,System.Object)">
            <summary>
              Resolves the specified template spec.
            </summary>
            <param name="templateSpec"> The template spec. </param>
            <param name="parameters"> The parameters. </param>
            <returns> </returns>
        </member>
        <member name="M:Octopus.Client.Util.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Resolves the specified template spec.
            </summary>
            <param name="templateSpec"> The template spec. </param>
            <param name="parameters"> The parameters. </param>
            <returns> </returns>
        </member>
    </members>
</doc>
